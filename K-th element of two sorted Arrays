class Solution{
    public:
    int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        // Concept merge two sorted array
        for(int i=n-1,j=0;i>=0 and j<m;i--,j++){
            if(arr1[i] > arr2[j]){
                swap(arr1[i],arr2[j]);
            }
        }
        
        // sort the both array
        sort(arr1,arr1+n);
        sort(arr2,arr2+m);
        
        if(k <= n){
            return arr1[k-1];
        }
        
        return arr2[k-n-1];
    }
};

Approach 2 : By using two pointer approach

class Solution{
    public:
    int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        // Trying to solve the question by two pointer approach
        int i = 0;
        int j = 0;
        int count = 0;
        while(i < n and j < m){
            if(arr1[i] <= arr2[j]){
                count ++;
                if(count == k){
                    return arr1[i];
                }
                i++;
            }else{
                count ++;
                if(count == k){
                    return arr2[j];
                }
                j++;
            }
        }
        
        while(i < n){
            count++;
            if(count == k){
                return arr1[i];
            }
            i++;
        }
        
        while(j < m){
            count++;
            if(count == k){
                return arr2[j];
            }
            j++;
        }
    }
};
